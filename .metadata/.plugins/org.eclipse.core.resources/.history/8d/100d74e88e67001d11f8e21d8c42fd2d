package gft.controllers;

import java.text.DateFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import gft.dto.etiqueta.EtiquetaMapper;
import gft.dto.etiqueta.RegistroEtiquetaDTO;
import gft.dto.usuario.RegistroUsuarioDTO;
import gft.dto.usuario.UsuarioMapper;
import gft.entities.Etiqueta;
import gft.entities.HistoricoParametros;
import gft.entities.ListaNoticias;
import gft.entities.Usuario;
import gft.services.EtiquetaService;
import gft.services.UsuarioService;

@RestController
@RequestMapping("v1/usuarios")
public class UsuarioController {

	private final UsuarioService usuarioService;
	private final EtiquetaService etiquetaService;

	public UsuarioController(UsuarioService usuarioService, EtiquetaService etiquetaService) {
		this.usuarioService = usuarioService;
		this.etiquetaService = etiquetaService;
	}

	@SuppressWarnings("rawtypes")
	@PostMapping("/cadastrar")
	public ResponseEntity salvarUsuario(@RequestBody RegistroUsuarioDTO dto) {
		Usuario usuarioAutenticado = (Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		if (usuarioAutenticado.getPerfil().getNome().equals("Admin")) {
			Usuario usuario = usuarioService.salvarUsuario(UsuarioMapper.fromDTO(dto));
			return ResponseEntity.ok(UsuarioMapper.fromEntity(usuario));
		}
		
		return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Cadastro de usuários só pode ser realizado por perfil administrador.");
	}

	@SuppressWarnings("rawtypes")
	@PostMapping("/etiquetas/vincular")
	public ResponseEntity salvarEtiqueta(@RequestBody RegistroEtiquetaDTO dto) {	
		Usuario usuarioAutenticado = (Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		if (usuarioAutenticado.getPerfil().getNome().equals("Usuario")) {
			Etiqueta etiqueta = etiquetaService.salvarEtiqueta(EtiquetaMapper.fromDTO(usuarioAutenticado, dto));

			if (etiqueta == null) {
				return ResponseEntity.status(HttpStatus.ALREADY_REPORTED).body("Etiqueta já está vinculada ao usuário!");
			} else {
				return ResponseEntity.status(HttpStatus.CREATED).body("Etiqueta vinculada ao usuário com sucesso!");
			}
		} 
		
		return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Cadastro de etiquetas só pode ser realizado por perfil sem administrador.");
	}

	@SuppressWarnings("rawtypes")
	@GetMapping("/noticias/antigas")
	public ResponseEntity obterRespostaApiNoticiasAntigas(@RequestParam String q, @RequestParam String date) {
		Usuario usuarioAutenticado = (Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		ListaNoticias noticias = etiquetaService.webClient(usuarioAutenticado, q, date);

		if (noticias == null) {
			return ResponseEntity.status(HttpStatus.ALREADY_REPORTED).body("Etiqueta não está cadastrada para o usuário.");
		} else {
			return ResponseEntity.ok(noticias);
		}
	}
	
	@SuppressWarnings("rawtypes")
	@GetMapping("/noticias/hoje")
	public ResponseEntity obterRespostaApiNoticiasHoje(@RequestParam String q) throws ParseException {
		Usuario usuarioAutenticado = (Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		ListaNoticias noticias = etiquetaService.webClient(usuarioAutenticado, q, verificarDataDeHoje());

		if (noticias == null) {
			return ResponseEntity.status(HttpStatus.ALREADY_REPORTED).body("Etiqueta não está cadastrada para o usuário.");
		} else {
			return ResponseEntity.ok(noticias);
		}
	}
	
	private String verificarDataDeHoje() {
		Calendar c = Calendar.getInstance();
		Date data = c.getTime();
		DateFormat f = DateFormat.getDateInstance(DateFormat.DATE_FIELD); 
		
		return f.format(data);
	}

	@SuppressWarnings("rawtypes")
	@GetMapping("/etiquetas-mais-acessadas")
	public ResponseEntity visualizarEtiquetasMaisAcessadas() {
		Usuario usuarioAutenticado = (Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
		if (usuarioAutenticado.getPerfil().getNome().equals("Admin")) {
			return ResponseEntity.ok(etiquetaService.listarEtiquetasMaisAcessadas());
		} 
		
		return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Histórico de etiquetas mais acessadas só pode ser visualizado por perfil administrador.");
	}
	
	@GetMapping("/parametros-acessados")
	public List<HistoricoParametros> visualizarParametrosAcessadosHoje() {
		Usuario usuarioAutenticado = (Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		
	
			return etiquetaService.visualizarParametrosAcessadosHoje(usuarioAutenticado, verificarDataDeHoje());
		
	}
}
