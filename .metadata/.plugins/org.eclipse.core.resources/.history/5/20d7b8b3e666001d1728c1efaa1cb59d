package gft.services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import gft.entities.Etiqueta;
import gft.entities.Noticia;
import gft.entities.Usuario;
import gft.exception.EntityNotFoundException;
import gft.repositories.EtiquetaRepository;
import reactor.core.publisher.Mono;

@Service
public class EtiquetaService {

	private final EtiquetaRepository etiquetaRepository;

	public EtiquetaService(EtiquetaRepository etiquetaRepository) {
		this.etiquetaRepository = etiquetaRepository;
	}

	public Etiqueta salvarEtiqueta(Etiqueta etiqueta) {
		try {
			Etiqueta etiquetaExistente = buscarEtiquetaPorNome(etiqueta.getNome());

			if (verificarSeEtiquetaJaExisteParaUsuario(etiqueta).isEmpty()) {
				atualizarEtiqueta(etiqueta, etiquetaExistente.getId());
				return etiqueta;
			}
		} catch (Exception e) {
			etiquetaRepository.save(etiqueta);
			return etiqueta; 
		}
		return null;
	}

	public Collection<Etiqueta> verificarSeEtiquetaJaExisteParaUsuario(Etiqueta etiqueta) {
		return etiquetaRepository.findByNomeAndUsuariosIn(etiqueta.getNome(), etiqueta.getUsuarios());
	}

	public Etiqueta atualizarEtiqueta(Etiqueta etiqueta, Long id) {
		Etiqueta etiquetaOriginal = this.buscarEtiqueta(id);

		List<Usuario> usuarios = new ArrayList<>();
		usuarios.addAll(etiquetaOriginal.getUsuarios());
		usuarios.addAll(etiqueta.getUsuarios());

		etiqueta.setUsuarios(usuarios);
		etiqueta.setId(etiquetaOriginal.getId());

		return etiquetaRepository.save(etiqueta);
	}

	public Etiqueta buscarEtiquetaPorNome(String nome) {
		Optional<Etiqueta> optional = Optional.of(etiquetaRepository.findByNome(nome));
		return optional.orElseThrow(() -> new EntityNotFoundException("Etiqueta não encontrada!"));
	}

	public Etiqueta buscarEtiqueta(Long id) {
		Optional<Etiqueta> optional = etiquetaRepository.findById(id);

		return optional.orElseThrow(() -> new EntityNotFoundException("Etiqueta não encontrada!"));
	}
}
