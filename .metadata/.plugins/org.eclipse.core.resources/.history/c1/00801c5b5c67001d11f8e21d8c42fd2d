package gft.services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import gft.entities.Etiqueta;
import gft.entities.HistoricoParametros;
import gft.entities.ListaNoticias;
import gft.entities.Usuario;
import gft.exception.EntityNotFoundException;
import gft.repositories.EtiquetaRepository;
import gft.repositories.HistoricoParametrosRepository;
import reactor.core.publisher.Mono;

@Service
public class EtiquetaService {

	private final EtiquetaRepository etiquetaRepository;
	private final HistoricoParametrosRepository historicoParametrosRepository;
	private final WebClient webClient;

	public EtiquetaService(EtiquetaRepository etiquetaRepository, WebClient webClient,
			HistoricoParametrosRepository historicoParametrosRepository) {
		this.etiquetaRepository = etiquetaRepository;
		this.historicoParametrosRepository = historicoParametrosRepository;
		this.webClient = webClient;
	}

	public Etiqueta salvarEtiqueta(Etiqueta etiqueta) {
		try {
			Etiqueta etiquetaExistente = buscarEtiquetaPorNome(etiqueta.getNome());

			if (verificarSeEtiquetaJaExisteParaUsuario(etiqueta.getNome(), etiqueta.getUsuarios()).isEmpty()) {
				atualizarEtiqueta(etiqueta, etiquetaExistente.getId());
				return etiqueta;
			}
		} catch (Exception e) {
			etiquetaRepository.save(etiqueta);
			return etiqueta;
		}
		return null;
	}

	public Collection<Etiqueta> verificarSeEtiquetaJaExisteParaUsuario(String nomeEtiqueta, List<Usuario> usuario) {
		return etiquetaRepository.findByNomeAndUsuariosIn(nomeEtiqueta, usuario);
	}

	public Etiqueta atualizarEtiqueta(Etiqueta etiqueta, Long id) {
		Etiqueta etiquetaOriginal = this.buscarEtiqueta(id);

		List<Usuario> usuarios = new ArrayList<>();
		usuarios.addAll(etiquetaOriginal.getUsuarios());
		usuarios.addAll(etiqueta.getUsuarios());

		etiqueta.setUsuarios(usuarios);
		etiqueta.setId(etiquetaOriginal.getId());

		return etiquetaRepository.save(etiqueta);
	}

	public Etiqueta buscarEtiquetaPorNome(String nome) {
		Optional<Etiqueta> optional = Optional.of(etiquetaRepository.findByNome(nome));
		return optional.orElseThrow(() -> new EntityNotFoundException("Etiqueta não encontrada!"));
	}

	public Etiqueta buscarEtiqueta(Long id) {
		Optional<Etiqueta> optional = etiquetaRepository.findById(id);

		return optional.orElseThrow(() -> new EntityNotFoundException("Etiqueta não encontrada!"));
	}

	public ListaNoticias webClient(Usuario usuario, String q, String date) {
		List<Usuario> usuarios = new ArrayList<>();
		usuarios.add(usuario);

		Collection<Etiqueta> etiquetaExistente = verificarSeEtiquetaJaExisteParaUsuario(q, usuarios);

		if (!etiquetaExistente.isEmpty()) {
			Mono<ListaNoticias> monoNoticia = this.webClient.method(HttpMethod.GET)
					.uri(uriBuilder -> uriBuilder.path("api/").queryParam("q", q).queryParam("date", date).build())
					.retrieve().bodyToMono(ListaNoticias.class);

			ListaNoticias noticia = monoNoticia.block();

			historicoParametrosRepository.save(new HistoricoParametros(null, q.toLowerCase(), date));
			return noticia;
		}

		return null;
	}

	public Collection<String> listarEtiquetasMaisAcessadas() {
		List<HistoricoParametros> historicoCompletoDeParametros = historicoParametrosRepository.findAll();
		List<String> etiquetas = new ArrayList<>();

		for (HistoricoParametros parametros : historicoCompletoDeParametros) {
			etiquetas.add(parametros.getEtiqueta());
		}

		Set<String> ocorrenciasDasEtiquetas = new HashSet<String>(etiquetas);
		List<Integer> contadorDeOcorrenciaDeEtiquetas = new ArrayList<>();
		List<String> indices = new ArrayList<>();

		int i = 0;
		for (String ocorrencia : ocorrenciasDasEtiquetas) {
			contadorDeOcorrenciaDeEtiquetas.add(Collections.frequency(etiquetas, ocorrencia));
			indices.add(i + "");
			i++;
		}

		List<String> etiquetasEmOrdem = new ArrayList<>();
		
		int a, b = 0;
		for(int ocorrenciaX : contadorDeOcorrenciaDeEtiquetas) {
			for (int ocorrenciaY : contadorDeOcorrenciaDeEtiquetas) {
				if (ocorrenciaX < ocorrenciaY) {
					int temp = ocorrenciaX;
					ocorrenciaX.set(ocorrenciaX, ocorrenciaY);
					ocorrenciaY = temp;
				}
				b++;
			}
			a++;
		}
		
		for (int i1 : contadorDeOcorrenciaDeEtiquetas) {
			System.out.print(i1+" ");
		}

	/*
	 * Map<String, Integer> mapaFreq = new HashMap<>(); // Cria o mapa de
	 * Frequências for (String palavra : etiquetas) { if
	 * (!mapaFreq.containsKey(palavra)) { mapaFreq.put(palavra, 1); } else {
	 * mapaFreq.put(palavra, 1 + mapaFreq.get(palavra)); } } // Arrays para
	 * armazenar os 3 valores mais frequentes. String[] palavrasMaisFrequentes = new
	 * String[3]; int[] freqPalavras = new int[3]; // Percorre todos os valores do
	 * mapa for (Map.Entry<String, Integer> entrada : mapaFreq.entrySet()) { // Se
	 * achar algo mais frequente que a primeira posição if (entrada.getValue() >=
	 * freqPalavras[0]) { freqPalavras[0] = entrada.getValue();
	 * palavrasMaisFrequentes[0] = entrada.getKey();
	 * 
	 * } else { if (entrada.getValue() >= freqPalavras[1]) { freqPalavras[1] =
	 * entrada.getValue(); palavrasMaisFrequentes[1] = entrada.getKey(); } else if
	 * (entrada.getValue() >= freqPalavras[2]) { freqPalavras[2] =
	 * entrada.getValue(); palavrasMaisFrequentes[2] = entrada.getKey(); } } //
	 * System.out.println(entrada.getKey() + "/" + entrada.getValue()); imprime todo
	 * o mapa } for (int i = 0; i < freqPalavras.length; i++) { System.out.println(i
	 * + 1 + " palavra: " + palavrasMaisFrequentes[i] + " \nFrequência: " +
	 * freqPalavras[i] + "\n------------------------\n"); }
	 * 
	 * 
	 * 
	 * /* Set<String> ocorrenciasDasEtiquetas = new HashSet<String>(etiquetas);
	 * List<Integer> contadorDeOcorrenciaDeEtiquetas = new ArrayList<>();
	 * List<String> etiquetasEmOrdem = new ArrayList<>();
	 * 
	 * for (String ocorrencia : ocorrenciasDasEtiquetas) {
	 * contadorDeOcorrenciaDeEtiquetas.add(Collections.frequency(etiquetas,
	 * ocorrencia)); }
	 * 
	 * //for (Integer etiqueta : contadorDeOcorrenciaDeEtiquetas) {
	 * Collections.sort(contadorDeOcorrenciaDeEtiquetas); //}
	 */

	return null;
}

}
