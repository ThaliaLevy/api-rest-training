package gft.services;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import gft.entities.Etiqueta;
import gft.entities.Usuario;
import gft.exception.EntityNotFoundException;
import gft.repositories.EtiquetaRepository;

@Service
public class EtiquetaService {

	private final EtiquetaRepository etiquetaRepository;

	public EtiquetaService(EtiquetaRepository etiquetaRepository) {
		this.etiquetaRepository = etiquetaRepository;
	}

	public boolean verificarSeEtiquetaJaExiste(Etiqueta etiqueta) {
		String nomeNovaEtiqueta = etiqueta.getNome();
		Collection<Etiqueta> etiquetaDoRepository = etiquetaRepository.findByNome(nomeNovaEtiqueta);
		//System.out.println("Nome " + etiquetaDoRepository.toString());

		List<Usuario> usuariosEtiqueta = etiqueta.getUsuarios();
		Collection<Etiqueta> usuariosDoRepository = etiquetaRepository.findByUsuariosIn(usuariosEtiqueta);
		//System.out.println("Usuarios " + usuariosDoRepository);

		if (!etiquetaDoRepository.isEmpty()) { // tem etiqueta com esse nome? sim
			for (Etiqueta idEtiqueta : usuariosDoRepository) {
				if (etiquetaDoRepository.equals(usuariosDoRepository)) {

					System.out.println(idEtiqueta);
				}
			}

			/*
			 * for (int i = 0; i < usuariosDoRepository.size(); i++) { String
			 * idEtiquetaQueUsuarioContem = usuariosDoRepository[i]; // fruit is an element
			 * of the `fruits` array. }
			 * 
			 * if(etiquetaDoRepository.equals(usuariosEtiqueta)) { // return true; } else {
			 * Etiqueta etiquetaTetse = new Etiqueta(null, nomeNovaEtiqueta,
			 * usuariosEtiqueta); }
			 */
		}
		return false;
	}

	public Etiqueta salvarEtiqueta(Etiqueta etiqueta) {
		if (verificarSeEtiquetaJaExiste(etiqueta) == false) {
			return etiquetaRepository.save(etiqueta);
		}

		return null;
	}

	public Page<Etiqueta> listarTodaAsEtiquetas(Pageable pageable) {
		return etiquetaRepository.findAll(pageable);
	}

	public Etiqueta buscarEtiqueta(Long id) {
		Optional<Etiqueta> optional = etiquetaRepository.findById(id);

		return optional.orElseThrow(() -> new EntityNotFoundException("Etiqueta n√£o encontrada!"));
	}

	public Etiqueta atualizarEtiqueta(Etiqueta etiqueta, Long id) {
		Etiqueta etiquetaOriginal = this.buscarEtiqueta(id);
		etiqueta.setId(etiquetaOriginal.getId());

		return etiquetaRepository.save(etiqueta);
	}

	public void excluirEtiqueta(Long id) {
		Etiqueta etiquetaServiceOriginal = this.buscarEtiqueta(id);

		etiquetaRepository.delete(etiquetaServiceOriginal);
	}
}
