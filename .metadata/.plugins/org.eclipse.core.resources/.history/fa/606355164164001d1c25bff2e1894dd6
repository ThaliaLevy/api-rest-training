package gft.controllers;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import gft.dto.etiqueta.EtiquetaMapper;
import gft.dto.etiqueta.ConsultaEtiquetaDTO;
import gft.dto.etiqueta.RegistroClienteDTO;
import gft.entities.Etiqueta;
import gft.services.ClienteService;

@RestController
@RequestMapping("v1/clientes")
public class ClienteController {

	private final ClienteService clienteService;

	public ClienteController(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	@GetMapping // map: converte o tipo de uma classe para outra
	public ResponseEntity<Page<ConsultaEtiquetaDTO>> buscarClientes(@PageableDefault Pageable pageable) {
		return ResponseEntity.ok(clienteService.listarTodosOsClientes(pageable).map(EtiquetaMapper::fromEntity));
	}

	@PostMapping
	public ResponseEntity<ConsultaEtiquetaDTO> salvarCliente(@RequestBody RegistroClienteDTO dto) {
		Etiqueta cliente = clienteService.salvarCliente(EtiquetaMapper.fromDTO(dto));
		return ResponseEntity.ok(EtiquetaMapper.fromEntity(cliente));
	}

	@GetMapping("{id}") // localhost:8080/v1/filiais/1 -> /1 se eu quiser id = 1
	public ResponseEntity<ConsultaEtiquetaDTO> buscarCliente(@PathVariable Long id) {
		Etiqueta cliente = clienteService.buscarCliente(id);

		return ResponseEntity.ok(EtiquetaMapper.fromEntity(cliente));
	}

	@PutMapping("{id}")
	public ResponseEntity<ConsultaEtiquetaDTO> alterarCliente(@RequestBody RegistroClienteDTO dto, @PathVariable Long id) {
		try {
			Etiqueta cliente = clienteService.atualizarCliente(EtiquetaMapper.fromDTO(dto), id);

			return ResponseEntity.ok(EtiquetaMapper.fromEntity(cliente));
		} catch (Exception e) {
			return ResponseEntity.notFound().build();
		}
	}


	@DeleteMapping("{id}")
	public ResponseEntity<ConsultaEtiquetaDTO> excluirCliente(@PathVariable Long id) {
		try {
			clienteService.excluirCliente(id);

			return ResponseEntity.ok().build();
		} catch (Exception e) {
			return ResponseEntity.notFound().build();
		}

	}
}
