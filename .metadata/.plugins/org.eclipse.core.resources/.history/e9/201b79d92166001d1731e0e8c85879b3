package gft.services;

import java.util.Collection;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import gft.entities.Etiqueta;
import gft.exception.EntityNotFoundException;
import gft.repositories.EtiquetaRepository;

@Service
public class EtiquetaService {

	private final EtiquetaRepository etiquetaRepository;

	public EtiquetaService(EtiquetaRepository etiquetaRepository) {
		this.etiquetaRepository = etiquetaRepository;
	}
	
	

/*	public boolean verificarSeEtiquetaJaExiste(Etiqueta etiqueta) {
		String nomeNovaEtiqueta = etiqueta.getNome();
		Collection<Etiqueta> idEtiquetaExistente = etiquetaRepository.findByNome(nomeNovaEtiqueta);
		//System.out.println(idEtiquetaExistente);
	
		
		if(!idEtiquetaExistente.isEmpty()) {
		//	List<Usuario> idsNovosUsuarios = etiqueta.getUsuarios();
		//	Collection<Etiqueta> idEtiquetaExistenteParaUsuario = etiquetaRepository.findByUsuariosIn(idsNovosUsuarios);
		//	System.out.println(idEtiquetaExistenteParaUsuario);
			
			//fazer nova etiqueta setando para o objeto quais os ids que serão passados
			
			//System.out.println(Long.parseLong(idEtiquetaExistente.toString()));
			//Long teste = Long.parseLong(idEtiquetaExistente.toString());
			Object[] teste = idEtiquetaExistente.toArray();
			Long testee = Long.parseLong(teste[0] + "");
			
			
			atualizarEtiqueta(etiqueta, testee);
			
			return true;
		} else {
			
		}
		
		
		//System.out.println("Nome " + etiquetaDoRepository.toString());
		
		
		
			
		List<Usuario> usuariosEtiqueta = etiqueta.getUsuarios();
		Collection<Etiqueta> usuariosDoRepository = etiquetaRepository.findByUsuariosIn(usuariosEtiqueta);
		System.out.println("Usuarios " + usuariosDoRepository);
		
		for (Etiqueta idEtiquetaUsduario : usuariosDoRepository) {
			if (etiquetaDoRepository.equals(idEtiquetaUsduario)) {
				System.out.println("O que não ia entrar: " + etiquetaDoRepository);
				return true;
			} else {
				//usuariosReescritos.add(idEtiquetaUsduario.toString());
				System.out.println("O que entra: " + idEtiquetaUsduario);
				//System.out.println("Usuario que reescreveu "+usuariosDoRepository);
				//System.out.println("Reescrito"+usuariosReescritos);
				//insere o novo id
			}
		}
		

		if (!etiquetaDoRepository.isEmpty()) { // tem etiqueta com esse nome? sim
			Etiqueta reescreverEtiqueta = null;
			List<String> usuariosReescritos = new ArrayList<>();
			
		
			for (Etiqueta idEtiqueta : etiquetaDoRepository) {
				for (Etiqueta idEtiquetaUsduario : usuariosDoRepository) {
					if (idEtiqueta.equals(idEtiquetaUsduario)) {
						System.out.println("O que não ia entrar: " + idEtiqueta);
						return true;
					} else {
						//usuariosReescritos.add(idEtiquetaUsduario.toString());
						System.out.println("O que entra: " + idEtiqueta);
						//System.out.println("Usuario que reescreveu "+usuariosDoRepository);
						//System.out.println("Reescrito"+usuariosReescritos);
						//insere o novo id
					}
				}
			}
return true;
			
			 * for (int i = 0; i < usuariosDoRepository.size(); i++) { String
			 * idEtiquetaQueUsuarioContem = usuariosDoRepository[i]; // fruit is an element
			 * of the `fruits` array. }
			 * 
			 * if(etiquetaDoRepository.equals(usuariosEtiqueta)) { // return true; } else {
			 * Etiqueta etiquetaTetse = new Etiqueta(null, nomeNovaEtiqueta,
			 * usuariosEtiqueta); }
			
			
		}
		return false;
	} */
	
	public Collection<Etiqueta> verificarSeEtiquetaJaExiste(Etiqueta etiqueta) {
		return etiquetaRepository.findByNomeAndUsuariosIn(etiqueta.getNome(), etiqueta.getUsuarios());
	}

	public Etiqueta salvarEtiqueta(Etiqueta etiqueta) {
		if(verificarSeEtiquetaJaExiste(etiqueta).isEmpty()) {
			Etiqueta objetoDoBanco = buscarEtiquetaPorNome(etiqueta.getNome());
			System.out.println(objetoDoBanco);
			//atualizarEtiqueta(etiqueta, objetoDoBanco.get);
			
			etiquetaRepository.save(etiqueta);
			return etiqueta;
		}

		return null;
	}
	
	public Etiqueta atualizarEtiqueta(Etiqueta etiqueta, Long id) {
		Etiqueta etiquetaOriginal = this.buscarEtiqueta(id);
		etiqueta.setId(etiquetaOriginal.getId());

		return etiquetaRepository.save(etiqueta);
	}

	public Page<Etiqueta> listarTodaAsEtiquetas(Pageable pageable) {
		return etiquetaRepository.findAll(pageable);
	}

	public Etiqueta buscarEtiquetaPorNome(String nome) {
		Optional<Etiqueta> optional = Optional.of(etiquetaRepository.findByNome(nome));
		return optional.orElseThrow(() -> new EntityNotFoundException("Etiqueta não encontrada!")); 
	}
	
	public Etiqueta buscarEtiqueta(Long id) {
		Optional<Etiqueta> optional = etiquetaRepository.findById(id);

		return optional.orElseThrow(() -> new EntityNotFoundException("Etiqueta não encontrada!"));
	}

	

	public void excluirEtiqueta(Long id) {
		Etiqueta etiquetaServiceOriginal = this.buscarEtiqueta(id);

		etiquetaRepository.delete(etiquetaServiceOriginal);
	}
}
