package gft.services;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import gft.entities.Noticia;
import gft.entities.Usuario;
import gft.repositories.UsuarioRepository;
import reactor.core.publisher.Mono;

@Service
public class UsuarioService implements UserDetailsService {

	private final UsuarioRepository usuarioRepository;
	private final WebClient webClient;

	public UsuarioService(UsuarioRepository usuarioRepository, WebClient webClient) {
		this.usuarioRepository = usuarioRepository;
		this.webClient = webClient;
	}

	public Usuario buscarUsuarioPorEmail(String email) {
		Optional<Usuario> optional = usuarioRepository.findByEmail(email);

		if (optional.isEmpty()) {
			throw new UsernameNotFoundException("Usuário não encontrado!");
		}
		return optional.get();
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		return buscarUsuarioPorEmail(username);
	}

	public Usuario buscarUsuarioPorId(Long idUsuario) {
		Optional<Usuario> optional = usuarioRepository.findById(idUsuario);

		if (optional.isEmpty()) {
			throw new RuntimeException("Usuário não encontrado!");
		}
		return optional.get();
	}

	public Usuario salvarUsuario(Usuario usuario) {
		return usuarioRepository.save(usuario);
	}
	
	public boolean verificarSeEtiquetaExisteParaUsuarioAutenticado(Long id, String nome) {
		usuarioRepository.findByIdAndNome(id, nome);
		
		return false;
	}
	
	public Noticia webClient(Long id, String q, String date) {
		if() {
			
		} 
		
		Mono<Noticia> monoNoticia = this.webClient.method(HttpMethod.GET)
				.uri(uriBuilder -> uriBuilder.path("api/")
						.queryParam("q", q)
						.queryParam("date", date)
						.build())
				.retrieve().bodyToMono(Noticia.class);

		Noticia noticia = monoNoticia.block();
		return noticia;
	}
}
